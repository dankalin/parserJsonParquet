[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\dkalin\AppData\Local\Temp\idea100.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\dkalin\AppData\Local\Temp\idea100.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 85.8502ms
[debug]       Load.loadUnit: defsScala took 0.303ms
[debug] [Loading] Scanning directory C:\Users\dkalin\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\dkalin\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 16.0201 ms
[debug]           Load.resolveProject(global-plugins) took 45.7721ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\dkalin\.sbt\1.0\plugins, plugins: List(<none>))) took 92.8971ms
[debug] [Loading] Done in C:\Users\dkalin\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 118.7028ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2287ms
[debug]     Load.loadUnit(file:/C:/Users/dkalin/.sbt/1.0/plugins/, ...) took 212.6837ms
[debug]   Load.apply: load took 401.4852ms
[debug]   Load.apply: resolveProjects took 6.2907ms
[debug]   Load.apply: finalTransforms took 53.3678ms
[debug]   Load.apply: config.delegates took 8.8826ms
[debug]   Load.apply: Def.make(settings)... took 420.1325ms
[debug]   Load.apply: structureIndex took 81.4686ms
[debug]   Load.apply: mkStreams took 1.7936ms
[info] loading global plugins from C:\Users\dkalin\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3702.5602ms
[debug]           Load.loadUnit: plugins took 36.2047ms
[debug]           Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory C:\parserJsonParquet\project
[debug]             Load.loadUnit: mkEval took 9.4393ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\parserJsonParquet\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.71 ms
[info] loading settings for project parserjsonparquet-build from plugins.sbt,idea100.sbt ...
[debug]               Load.resolveProject(parserjsonparquet-build) took 4.2738ms
[debug]             Load.loadTransitive: finalizeProject(Project(id parserjsonparquet-build, base: C:\parserJsonParquet\project, plugins: List(<none>))) took 6.5418ms
[debug] [Loading] Done in C:\parserJsonParquet\project, returning: (parserjsonparquet-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 208.7545ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.387ms
[debug]         Load.loadUnit(file:/C:/parserJsonParquet/project/, ...) took 251.4116ms
[debug]       Load.apply: load took 253.5443ms
[debug]       Load.apply: resolveProjects took 0.2236ms
[debug]       Load.apply: finalTransforms took 6.3868ms
[debug]       Load.apply: config.delegates took 0.6087ms
[debug]       Load.apply: Def.make(settings)... took 77.3471ms
[debug]       Load.apply: structureIndex took 21.1918ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\parserJsonParquet\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 813.4642ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\parserJsonParquet
[debug]       Load.loadUnit: mkEval took 0.3198ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\parserJsonParquet, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.3996 ms
[info] loading settings for project parserjsonparquet from build.sbt ...
[debug]         Load.resolveProject(parserjsonparquet) took 36.4612ms
[debug]       Load.loadTransitive: finalizeProject(Project(id parserjsonparquet, base: C:\parserJsonParquet, plugins: List(<none>))) took 41.5529ms
[debug] [Loading] Done in C:\parserJsonParquet, returning: (parserjsonparquet)
[debug]     Load.loadUnit: loadedProjectsRaw took 192.4776ms
[debug]     Load.loadUnit: cleanEvalClasses took 7.0985ms
[debug]   Load.loadUnit(file:/C:/parserJsonParquet/, ...) took 1014.5391ms
[debug] Load.apply: load took 1018.9635ms
[debug] Load.apply: resolveProjects took 0.7185ms
[debug] Load.apply: finalTransforms took 40.6322ms
[debug] Load.apply: config.delegates took 1.3119ms
[debug] Load.apply: Def.make(settings)... took 171.3661ms
[debug] Load.apply: structureIndex took 46.2612ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to parserJsonParquet (in build file:/C:/parserJsonParquet/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53552 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53552, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to parserJsonParquet (in build file:/C:/parserJsonParquet/)
[debug] > Exec(idea-shell, None, None)
